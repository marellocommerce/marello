services:
    _defaults:
        autoconfigure: true

    marello_inventory.listener.doctrine.stock_level_hydration:
        class: Marello\Bundle\InventoryBundle\EventListener\Doctrine\StockLevelSubjectHydrationSubscriber
        tags:
            - { name: doctrine.event_subscriber }

    marello_inventory.listener.doctrine.stock_level_author_fill:
        class: Marello\Bundle\InventoryBundle\EventListener\Doctrine\StockLevelAuthorFillSubscriber
        arguments:
            - '@security.token_storage'
        tags:
            - { name: doctrine.event_subscriber }

    marello_inventory.listener.doctrine.stock_level_subject_delayed_assign:
        class: Marello\Bundle\InventoryBundle\EventListener\Doctrine\StockLevelSubjectAssignSubscriber
        tags:
            - { name: doctrine.event_subscriber }

    marello_inventory.event_listener.inventory_update_event_listener:
        class: 'Marello\Bundle\InventoryBundle\EventListener\InventoryUpdateEventListener'
        arguments:
            - '@marello_inventory.manager.inventory_manager'
            - '@marello_inventory.manager.balancedinventory_manager'
            - '@Marello\Bundle\WebhookBundle\Manager\WebhookProducer'
        tags:
            - { name: kernel.event_listener, event: marello_inventory.inventory.update, method: handleUpdateInventoryEvent }

    Marello\Bundle\InventoryBundle\Event\InventoryUpdateWebhookEvent: ~

    marello_inventory.event_listener.balancedinventory_update_event_listener:
        class: 'Marello\Bundle\InventoryBundle\EventListener\BalancedInventoryUpdateAfterEventListener'
        arguments:
            - '@oro_message_queue.client.message_producer'
            - '@marello_inventory.model.balancer.inventorybalancer_trigger_calculator'
            - '@Marello\Bundle\InventoryBundle\Entity\Repository\BalancedInventoryRepository'
            - '@oro_security.acl_helper'
        tags:
            - { name: kernel.event_listener, event: marello_inventory.balancedinventory.update_after, method: handleInventoryUpdateAfterEvent }

    marello_inventory.event_listener.inventorylevel_update_after_event_listener:
        class: 'Marello\Bundle\InventoryBundle\EventListener\InventoryLevelUpdateAfterEventListener'
        arguments:
            - '@oro_entity.doctrine_helper'
        tags:
            - { name: kernel.event_listener, event: marello_inventory.inventory.update_after, method: handleInventoryLevelUpdateAfterEvent }

    marello_inventory.event_listener.external_warehouse_event_listener:
        class: 'Marello\Bundle\InventoryBundle\EventListener\ExternalWarehouseEventListener'
        arguments:
            - '@oro_entity.doctrine_helper'
            - '@oro_config.manager'
        tags:
            - { name: kernel.event_listener, event: marello_supplier.supplier_dropship_toggle, method: onSupplierDropshipToggle }
            - { name: kernel.event_listener, event: marello_product.product_dropship_toggle, method: onProductDropshipToggle }

    marello_inventory.event_listener.inventory_level.form_view.event_listener:
        class: 'Marello\Bundle\InventoryBundle\EventListener\InventoryLevelFormViewEventListener'
        tags:
            - { name: kernel.event_listener, event: marello_inventory.inventory_level.finish_form_view, method: onFinishView }

    marello_inventory.event_listener.inventoryitem_event_listener:
        class: 'Marello\Bundle\InventoryBundle\EventListener\InventoryItemEventListener'
        arguments:
            - '@oro_message_queue.client.message_producer'
        lazy:  true
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    marello_inventory.event_listener.on_product_create_event_listener:
        class: 'Marello\Bundle\InventoryBundle\EventListener\OnProductCreateEventListener'
        arguments:
            - '@marello_inventory.manager.inventory_item_manager'
        lazy:  true
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    marello_inventory.event_listener.on_product_delete_event_listener:
        class: 'Marello\Bundle\InventoryBundle\EventListener\OnProductDeleteEventListener'
        arguments:
            - '@marello_inventory.manager.inventory_item_manager'
        lazy:  true
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    marello_inventory.event_listener.doctrine.warehouse_group_link.inventory_rebalance:
        class: 'Marello\Bundle\InventoryBundle\EventListener\Doctrine\WarehouseGroupLinkRebalanceListener'
        arguments:
            - '@oro_message_queue.client.message_producer'
            - '@oro_security.acl_helper'
        lazy:  true
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    marello_inventory.event_listener.doctrine.inventory_batch.inventory_rebalance:
        class: 'Marello\Bundle\InventoryBundle\EventListener\Doctrine\InventoryBatchInventoryRebalanceListener'
        arguments:
            - '@oro_message_queue.client.message_producer'
        lazy:  true
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    marello_inventory.event_listener.doctrine.inventory_batch:
        class: 'Marello\Bundle\InventoryBundle\EventListener\Doctrine\InventoryBatchEventListener'
        arguments:
            - '@marello_inventory.manager.inventory_manager'
            - '@marello_inventory.model.inventory_level_calculator'
        tags:
            - { name: doctrine.orm.entity_listener, entity: 'Marello\Bundle\InventoryBundle\Entity\InventoryItem', event: postPersist }
            - { name: doctrine.orm.entity_listener, entity: 'Marello\Bundle\InventoryBundle\Entity\InventoryItem', event: preUpdate }
            - { name: doctrine.orm.entity_listener, entity: 'Marello\Bundle\InventoryBundle\Entity\InventoryBatch', event: preUpdate, method: inventoryBatchPreUpdate }
            - { name: doctrine.event_listener, event: postFlush }

    marello_inventory.event_listener.datagrid.inventory_level_grid:
        class: 'Marello\Bundle\InventoryBundle\EventListener\Datagrid\InventoryLevelGridListener'
        arguments:
            - '@oro_entity.doctrine_helper'
        tags:
            - { name: kernel.event_listener, event: oro_datagrid.datagrid.build.before.marello-inventory-levels, method: onBuildBefore }

    Marello\Bundle\InventoryBundle\EventListener\Datagrid\InventoryLevelLogGridListener:
        arguments:
            - '@oro_entity.doctrine_helper'
        tags:
            - { name: kernel.event_listener, event: oro_datagrid.datagrid.build.before.marello-inventory-log, method: onBuildBefore }

    marello_inventory.event_listener.workflow.pending_transition_listener:
        class: 'Marello\Bundle\InventoryBundle\EventListener\Workflow\TransitionEventListener'
        arguments:
            - '@oro_workflow.manager'
            - '@oro_message_queue.client.message_producer'
            - '@event_dispatcher'
        tags:
            - { name: kernel.event_listener, event: extendable_action.pending_transition_after, method: onPendingTransitionAfter, priority: 10 }

    marello_inventory.event_listener.workflow.start_workflow_listener:
        class: 'Marello\Bundle\InventoryBundle\EventListener\Workflow\AllocationWorkflowStartListener'
        arguments:
            - '@oro_workflow.manager'
            - '@event_dispatcher'
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: postFlush }

    marello_inventory.event_listener.workflow.allocation_complete_listener:
        class: Marello\Bundle\InventoryBundle\EventListener\Workflow\AllocationCompleteListener
        arguments:
            - '@oro_entity.doctrine_helper'
            - '@oro_workflow.manager'
            - '@oro_message_queue.client.message_producer'
            - '@marello_inventory.model.inventory_level_totals_calculator'
        calls:
            - ['setEventDispatcher', ['@event_dispatcher']]
        tags:
            - { name: kernel.event_listener, event: extendable_action.allocation_complete, method: onAllocationComplete }

    Marello\Bundle\InventoryBundle\EventListener\Workflow\SendToWarehouseListener:
        arguments:
            - '@oro_workflow.manager'
            - '@Marello\Bundle\InventoryBundle\Model\Allocation\WarehouseNotifierRegistry'
        tags:
            - { name: kernel.event_listener, event: extendable_action.send_transition_after, method: onSendTransitionAfter, priority: 15 }